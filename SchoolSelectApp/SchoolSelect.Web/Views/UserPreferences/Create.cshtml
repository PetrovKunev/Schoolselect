@model SchoolSelect.Web.ViewModels.UserPreferenceInputModel
@{
    ViewData["Title"] = "Добавяне на предпочитание";
    var districts = ViewBag.Districts as List<string>;
    var profileTypes = ViewBag.ProfileTypes as Dictionary<string, string>;
}

<div class="container">
    <div class="row mb-4">
        <div class="col">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index">Начало</a></li>
                    <li class="breadcrumb-item"><a asp-action="Index">Моите предпочитания</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Добавяне</li>
                </ol>
            </nav>
            <h1>@ViewData["Title"]</h1>
            <p class="lead">Създайте нов набор от предпочитания, за да получите по-персонализирани препоръки за училища</p>
        </div>
    </div>

    <div class="row">
        <div class="col-md-8">
            <div class="card shadow-sm">
                <div class="card-body">
                    <form asp-action="Create" method="post">
                        <div asp-validation-summary="ModelOnly" class="alert alert-danger" role="alert"></div>

                        <div class="mb-3">
                            <label asp-for="PreferenceName" class="form-label"></label>
                            <input asp-for="PreferenceName" class="form-control" placeholder="Въведете име на предпочитанието" />
                            <span asp-validation-for="PreferenceName" class="text-danger"></span>
                            <div class="form-text">Например: "Моите предпочитания 2025", "Математически профил" и т.н.</div>
                        </div>

                        <h4 class="mt-4 mb-3">Местоположение</h4>
                        <div class="alert alert-info mb-3">
                            <i class="bi bi-info-circle"></i> Можете да изберете район, да зададете точно местоположение на картата, или и двете. За по-точни препоръки препоръчваме да използвате картата.
                        </div>
                        <div class="mb-3">
                            <label asp-for="UserDistrict" class="form-label"></label>
                            <select asp-for="UserDistrict" class="form-select">
                                <option value="">Изберете район</option>
                                @if (districts != null)
                                {
                                    @foreach (var district in districts)
                                    {
                                        <option value="@district">@district</option>
                                    }
                                }
                            </select>
                            
                        </div>

                        <div class="card mb-3">
                            <div class="card-body">
                                <h5 class="card-title">Изберете точно местоположение</h5>

                                <div class="input-group mb-3">
                                    <input type="text" id="address-search" class="form-control" placeholder="Въведете адрес за търсене">
                                    <button class="btn btn-outline-secondary" type="button" id="search-button">
                                        <i class="bi bi-search"></i>
                                    </button>
                                </div>

                                <div id="map" style="height: 400px; width: 100%;" class="mb-3"></div>

                                <div class="mb-3 text-end">
                                    <button type="button" id="clear-location-btn" class="btn btn-outline-danger btn-sm">
                                        <i class="bi bi-x-circle"></i> Изчисти местоположението
                                    </button>
                                </div>

                                <div class="row">
                                    <div class="col-md-6">
                                        <label asp-for="UserLatitude" class="form-label"></label>
                                        <input asp-for="UserLatitude" id="latitude-field" class="form-control" placeholder="Например: 42.6977" readonly />
                                        <span asp-validation-for="UserLatitude" class="text-danger"></span>
                                    </div>
                                    <div class="col-md-6">
                                        <label asp-for="UserLongitude" class="form-label"></label>
                                        <input asp-for="UserLongitude" id="longitude-field" class="form-control" placeholder="Например: 23.3219" readonly />
                                        <span asp-validation-for="UserLongitude" class="text-danger"></span>
                                    </div>
                                </div>

                                <div class="mt-3">
                                    <label for="search-radius" class="form-label">Радиус за търсене (км)</label>
                                    <div class="range-input-group">
                                        <input type="range" id="radius-slider" class="form-range" min="1" max="20" step="1" value="5">
                                        <div class="range-value"><span id="radius-value">5</span> км</div>
                                    </div>
                                    <input type="hidden" id="search-radius" name="SearchRadius" value="5">
                                    <div class="form-text">
                                        <i class="bi bi-info-circle"></i> Задайте максималното разстояние за търсене на училища от вашето местоположение.
                                    </div>
                                </div>
                            </div>
                        </div>

                        <h4 class="mt-4 mb-3">Предпочитани профили</h4>
                        <div class="mb-3">
                            <label class="form-label">Предпочитани профили</label>
                            <div class="profile-checkboxes">
                                @foreach (var profileType in ViewBag.ProfileTypes)
                                {
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" name="PreferredProfiles"
                                               value="@profileType.Key" id="profile-@profileType.Key.GetHashCode()"
                                               @(Model.PreferredProfiles.Contains(profileType.Key) ? "checked" : "")>
                                        <label class="form-check-label" for="profile-@profileType.Key.GetHashCode()">
                                            @profileType.Value
                                        </label>
                                    </div>
                                }
                            </div>
                            <div class="form-text">
                                Изберете профилите, които ви интересуват. Системата ще препоръча училища със съответни или подобни профили.
                            </div>
                        </div>

                        <h4 class="mt-4 mb-3">Важност на критериите</h4>
                        <div class="mb-3">
                            <div class="form-text mb-2">Задайте колко важен е всеки критерий за вас (от 0 до 5):</div>

                            <div class="mb-3">
                                <label asp-for="ProximityWeight" class="form-label"></label>
                                <div class="range-input-group">
                                    <input type="range" class="form-range" min="0" max="5" step="1" asp-for="ProximityWeight" id="proximityRange">
                                    <div class="range-value"><span id="proximityValue">@Model.ProximityWeight</span>/5</div>
                                </div>
                                <div class="form-text">Колко важно е училището да е близо до вашия адрес?</div>
                            </div>

                            <div class="mb-3">
                                <label asp-for="RatingWeight" class="form-label"></label>
                                <div class="range-input-group">
                                    <input type="range" class="form-range" min="0" max="5" step="1" asp-for="RatingWeight" id="ratingRange">
                                    <div class="range-value"><span id="ratingValue">@Model.RatingWeight</span>/5</div>
                                </div>
                                <div class="form-text">Колко важни са оценките и отзивите от други потребители?</div>
                            </div>

                            <div class="mb-3">
                                <label asp-for="ScoreMatchWeight" class="form-label"></label>
                                <div class="range-input-group">
                                    <input type="range" class="form-range" min="0" max="5" step="1" asp-for="ScoreMatchWeight" id="scoreMatchRange">
                                    <div class="range-value"><span id="scoreMatchValue">@Model.ScoreMatchWeight</span>/5</div>
                                </div>
                                <div class="form-text">Колко важно е съответствието между вашия очакван бал и минималния бал за прием?</div>
                            </div>

                            <div class="mb-3">
                                <label asp-for="ProfileMatchWeight" class="form-label"></label>
                                <div class="range-input-group">
                                    <input type="range" class="form-range" min="0" max="5" step="1" asp-for="ProfileMatchWeight" id="profileMatchRange">
                                    <div class="range-value"><span id="profileMatchValue">@Model.ProfileMatchWeight</span>/5</div>
                                </div>
                                <div class="form-text">Колко важно е наличието на избраните от вас профили?</div>
                            </div>

                            @* <div class="mb-3">
                                <label asp-for="FacilitiesWeight" class="form-label"></label>
                                <div class="range-input-group">
                                    <input type="range" class="form-range" min="0" max="5" step="1" asp-for="FacilitiesWeight" id="facilitiesRange">
                                    <div class="range-value"><span id="facilitiesValue">@Model.FacilitiesWeight</span>/5</div>
                                </div>
                                <div class="form-text">Колко важни са допълнителните възможности (спортни съоръжения, лаборатории и т.н.)?</div>
                            </div> *@
                        </div>

                        <div class="mt-4 d-flex justify-content-between">
                            <a asp-action="Index" class="btn btn-outline-secondary">Отказ</a>
                            <button type="submit" class="btn btn-success">
                                <i class="bi bi-check-circle"></i> Създай
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

    </div>
</div>

@section Scripts {
    <!-- Google Maps API -->
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAFS9gNX8TUHCn3L0PkgEoDWhXlLrJavHY&libraries=places&callback=initMap" async defer></script>
    <script>
        // Актуализиране на стойностите на плъзгачите
        document.querySelectorAll('.form-range').forEach(range => {
            range.addEventListener('input', function() {
                const valueId = this.id.replace('Range', 'Value');
                document.getElementById(valueId).textContent = this.value;
            });
        });

        // Google Maps интеграция
        let map;
        let marker;
        let circle;
        let searchRadius = 5; // по подразбиране в км

        function initMap() {
            // Център на София по подразбиране
            const defaultLocation = { lat: 42.6977, lng: 23.3219 };

            // Проверка дали има запазени координати
            const latField = document.getElementById('latitude-field');
            const lngField = document.getElementById('longitude-field');

            // Check if there are coordinates saved
            const hasCoordinates = latField.value && lngField.value;

            if (hasCoordinates) {
                defaultLocation.lat = parseFloat(latField.value);
                defaultLocation.lng = parseFloat(lngField.value);
            }

            map = new google.maps.Map(document.getElementById("map"), {
                center: defaultLocation,
                zoom: 12,
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                mapTypeControl: true,
                streetViewControl: true,
                fullscreenControl: true
            });

            // Create marker and circle only if coordinates exist or no coordinates are set yet
            if (hasCoordinates || !latField.value) {
                // Създаване на маркер, който може да се премества
                marker = new google.maps.Marker({
                    position: defaultLocation,
                    map: map,
                    draggable: true,
                    title: "Вашето местоположение",
                    animation: google.maps.Animation.DROP
                });

                // Създаване на кръг за визуализация на радиуса
                circle = new google.maps.Circle({
                    map: map,
                    radius: searchRadius * 1000, // превръщане в метри
                    fillColor: '#007bff',
                    fillOpacity: 0.1,
                    strokeColor: '#007bff',
                    strokeOpacity: 0.8,
                    strokeWeight: 2
                });

                // Свързване на кръга с маркера
                circle.bindTo('center', marker, 'position');
            }

            // Enable map click to add a marker if none exists
            google.maps.event.addListener(map, 'click', function(event) {
                if (!marker) {
                    // Create a new marker if it doesn't exist
                    marker = new google.maps.Marker({
                        position: event.latLng,
                        map: map,
                        draggable: true,
                        title: "Вашето местоположение",
                        animation: google.maps.Animation.DROP
                    });

                    // Create a new circle if it doesn't exist
                    circle = new google.maps.Circle({
                        map: map,
                        radius: searchRadius * 1000,
                        fillColor: '#007bff',
                        fillOpacity: 0.1,
                        strokeColor: '#007bff',
                        strokeOpacity: 0.8,
                        strokeWeight: 2
                    });

                    // Bind the circle to the marker
                    circle.bindTo('center', marker, 'position');

                    // Add drag event listener to the new marker
                    google.maps.event.addListener(marker, 'dragend', function() {
                        updateCoordinates(marker.getPosition());
                    });
                } else {
                    // Move existing marker
                    marker.setPosition(event.latLng);
                }

                updateCoordinates(event.latLng);
            });

            // Записване на координатите при преместване на маркера
            if (marker) {
                google.maps.event.addListener(marker, 'dragend', function() {
                    updateCoordinates(marker.getPosition());
                });
            }

            // Търсене на адрес
            document.getElementById('search-button').addEventListener('click', function() {
                searchAddress();
            });

            // Натискане на Enter в полето за търсене
            document.getElementById('address-search').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    searchAddress();
                }
            });

            // Актуализиране на радиуса при промяна на плъзгача
            document.getElementById('radius-slider').addEventListener('input', function() {
                updateRadius(this.value);
            });

            // Add the clear location functionality
            document.getElementById('clear-location-btn').addEventListener('click', function() {
                // Clear the coordinate fields
                document.getElementById('latitude-field').value = '';
                document.getElementById('longitude-field').value = '';

                // Remove the marker from the map
                if (marker) {
                    marker.setMap(null);
                    marker = null;
                }

                // Hide the circle
                if (circle) {
                    circle.setMap(null);
                    circle = null;
                }

                // Notify user
                $('.alert-info').after('<div class="alert alert-success clear-notification">Местоположението е изчистено. Само районът ще бъде използван.</div>');

                // Remove the notification after 5 seconds
                setTimeout(function() {
                    $('.clear-notification').fadeOut('slow', function() {
                        $(this).remove();
                    });
                }, 5000);
            });

            // Ако има запазени координати, актуализираме формата
            if (hasCoordinates && marker) {
                updateCoordinates(marker.getPosition());
            }
        }

        function updateCoordinates(position) {
            // Актуализиране на полетата за форма
            document.getElementById('latitude-field').value = position.lat().toFixed(6);
            document.getElementById('longitude-field').value = position.lng().toFixed(6);

            // Актуализиране на кръга
            if (circle) {
                circle.setRadius(searchRadius * 1000);
            }
        }

        function updateRadius(value) {
            searchRadius = parseInt(value);
            document.getElementById('radius-value').textContent = value;
            document.getElementById('search-radius').value = value;

            if (circle) {
                circle.setRadius(searchRadius * 1000);
            }
        }

        function searchAddress() {
            const address = document.getElementById('address-search').value;
            const geocoder = new google.maps.Geocoder();

            geocoder.geocode({ address: address + ', София, България' }, function(results, status) {
                if (status === 'OK') {
                    map.setCenter(results[0].geometry.location);

                    // Create marker if it doesn't exist
                    if (!marker) {
                        marker = new google.maps.Marker({
                            position: results[0].geometry.location,
                            map: map,
                            draggable: true,
                            title: "Вашето местоположение",
                            animation: google.maps.Animation.DROP
                        });

                        // Add drag event listener
                        google.maps.event.addListener(marker, 'dragend', function() {
                            updateCoordinates(marker.getPosition());
                        });
                    } else {
                        marker.setPosition(results[0].geometry.location);
                        marker.setMap(map); // Make sure it's visible
                    }

                    // Create circle if it doesn't exist
                    if (!circle) {
                        circle = new google.maps.Circle({
                            map: map,
                            radius: searchRadius * 1000,
                            fillColor: '#007bff',
                            fillOpacity: 0.1,
                            strokeColor: '#007bff',
                            strokeOpacity: 0.8,
                            strokeWeight: 2
                        });

                        // Bind to marker
                        circle.bindTo('center', marker, 'position');
                    } else {
                        circle.setMap(map); // Make sure it's visible
                    }

                    updateCoordinates(results[0].geometry.location);
                    map.setZoom(15);
                } else {
                    alert('Не успяхме да намерим този адрес: ' + status);
                }
            });
        }

        // Премахване на валидацията за UserDistrict
        $(document).ready(function() {
            // Премахване на атрибути data-val-required
            $('#UserDistrict').removeAttr('data-val-required');

            // Премахване на правилата за валидация за UserDistrict
            if ($.validator && $.validator.unobtrusive) {
                var $form = $('form');

                // Повторно парсване на формата след премахване на валидацията
                $.validator.unobtrusive.parse($form);

                // Премахване на изричното правило за UserDistrict
                var $userDistrict = $('#UserDistrict');
                if ($userDistrict.length && $userDistrict.rules) {
                    $userDistrict.rules('remove', 'required');
                }
            }

            // Добавяне на собствена валидация за поне един метод за местоположение
            $('form').on('submit', function(e) {
                var userDistrict = $('#UserDistrict').val();
                var latitude = $('#latitude-field').val();
                var longitude = $('#longitude-field').val();

                var hasLocation = userDistrict || (latitude && longitude);

                if (!hasLocation) {
                    // Показваме информативно съобщение за грешка
                    if (!$('.location-error').length) {
                        $('.alert-info').after('<div class="alert alert-danger location-error">Моля, изберете район или задайте точно местоположение на картата.</div>');
                    }

                    // Спираме изпращането на формата
                    e.preventDefault();
                    return false;
                } else {
                    // Изчистваме грешката, ако е показана
                    $('.location-error').remove();
                }

                return true;
            });
        });
    </script>

    <style>
        .range-input-group {
            display: flex;
            align-items: center;
        }

        .form-range {
            flex-grow: 1;
        }

        .range-value {
            min-width: 40px;
            text-align: right;
            margin-left: 10px;
        }

        /* Стилове за картата */
        #map {
            border-radius: 4px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .profile-checkboxes {
            max-height: 300px;
            overflow-y: auto;
            border: 1px solid #ccc;
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 4px;
        }

        .form-check {
            margin-bottom: 5px;
        }
    </style>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}